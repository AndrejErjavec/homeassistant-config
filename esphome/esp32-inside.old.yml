# Huge thanks to user Mahko_Mahko on Home Assistant Community for providing his configuration example. I included his practices in my configuration to make it work.

# https://community.home-assistant.io/t/solar-powered-self-watering-plant-no-plumbing-no-power-wip/464263/14

# TODO
# [] Implement deep sleep prevent switch instead of mqtt
# [] Battery level reporting

substitutions:
  devicename: esp32-inside
  max_run_duration: 60s
  sleep_duration: 60s

esp32:
  board: esp32dev
  framework:
    type: arduino

esphome:
  name: ${devicename}
  # on_boot documentation and priorities: https://esphome.io/components/esphome.html#on-boot
  on_boot:
    - priority: -100
      then: # At this priority, pretty much everything should already be initialized.
        - logger.log: "Starting sensor updates..."
        - repeat:
            count: 5
            then:
              #Sensor updates are turned off and manually requested on boot. 
              #Then the ESP goes back to sleep when they're done (unless told to stay awake)

              # Request sensor updates
              - component.update: dht_inside
              - delay: 2000ms # DHT11 is a really slow sensor
              - component.update: bmp_inside
              - delay: 100ms

  on_shutdown:
    priority: -100
    then:
      - if:
          condition:
            - binary_sensor.is_on: all_updates_received
          then:
            - logger.log: "Data from all sensors received"
          else:
            - logger.log: "One or more sensor updates missing"

      # Reset data update sensors states
      - binary_sensor.template.publish:
          id: inside_temperature_dht_received
          state: OFF
      - binary_sensor.template.publish:
          id: inside_humidity_dht_received
          state: OFF
      - binary_sensor.template.publish:
          id: inside_temperature_bmp_received
          state: OFF
      - binary_sensor.template.publish:
          id: inside_pressure_bmp_received
          state: OFF

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret ap_ssid
    password: !secret ap_password

captive_portal:
    
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

deep_sleep:
  id: deep_sleep_1
  run_duration: $max_run_duration
  sleep_duration: $sleep_duration

mqtt:
  broker: !secret mqtt_broker
  port: 1883
  username: !secret mqtt_username
  password: !secret mqtt_password
  birth_message:
  will_message:
  on_message:
    - topic: esp32-inside/ota_mode
      payload: 'ON'
      then:
        - deep_sleep.prevent: deep_sleep_1
        - logger.log: "OTA mode enabled - deep sleep mode disabled"
    - topic: esp32-inside/sleep_mode
      payload: 'ON'
      then:
        - deep_sleep.enter: deep_sleep_1
        - logger.log: "deep sleep mode enabled"

binary_sensor:
  # Data update sensors. Implemented as barrier. Again huge thanks to user Mahko_Mahko on Home Assistant Community for providing his configuration example.
  # https://community.home-assistant.io/t/solar-powered-self-watering-plant-no-plumbing-no-power-wip/464263/14

  # Inside temperature DHT
  - platform: template
    name: Temperature DHT updated
    id: inside_temperature_dht_received
    internal: True 
    # Internal components will not be exposed to the frontend (like Home Assistant). 
    # Only specifying an id without a name will implicitly set this to true.
  # Inside humidity DHT
  - platform: template
    name: Humidity DHT updated
    id: inside_humidity_dht_received
    internal: True 
  # Inside temperature BMP
  - platform: template
    name: Temperature BMP updated
    id: inside_temperature_bmp_received
    internal: True
  # Inside pressure BMP
  - platform: template
    name: Pressure BMP updated
    id: inside_pressure_bmp_received
    internal: True 
  # All updates
  - platform: template
    name: Updates from all sensors received
    id: all_updates_received
    icon: mdi:database-refresh-outline
    # entity_category: diagnostic
    # If all sensors data is received. Will be false even if only one sensor fails.
    lambda: |-
      return
      id(inside_temperature_dht_received).state &&
      id(inside_humidity_dht_received).state &&
      id(inside_temperature_bmp_received).state &&
      id(inside_pressure_bmp_received).state;
    on_press:
    # Would this work with on_state as well?
      then:
        - logger.log: 
            format: "All sensors updated after %.1f seconds of uptime. Entering deep sleep."
            args: ['id(uptime_seconds).state']
        - delay: 100ms
        - deep_sleep.enter: 
            id: deep_sleep_1

sensor:
  # Uptime sensor
  - platform: uptime
    id: uptime_seconds
    name: Uptime sensor
    update_interval: 1s
    accuracy_decimals: 1
    unit_of_measurement: s

# DHT11 - temperature, humidity
  - platform: dht
    model: DHT11
    pin: 15
    id: dht_inside
    update_interval: never
    temperature:
      name: "Temperature DHT"
      on_value:
        then:
          - binary_sensor.template.publish:
              id: inside_temperature_dht_received
              state: ON
    humidity:
      name: "Humidity DHT"
      on_value:
        then:
          - binary_sensor.template.publish:
              id: inside_humidity_dht_received
              state: ON

  # BMP280 - temperature, pressure
  - platform: bmp280
    address: 0x76
    id: bmp_inside
    update_interval: never
    temperature:
      name: "Temperature BMP"
      oversampling: 16x
      filters:
        - offset: -2.3
      on_value:
        then:
          - binary_sensor.template.publish:
              id: inside_temperature_bmp_received
              state: ON
    pressure:
      name: "Pressure BMP"
      on_value:
        then:
          - binary_sensor.template.publish:
              id: inside_pressure_bmp_received
              state: ON