substitutions:
  devicename: esp8266-outside
  max_run_duration: 60s
  sleep_duration: 60s

esp8266:
  board: d1_mini

esphome:
  name: $devicename
  on_boot:
    - priority: -100
      then: # At this priority, pretty much everything should already be initialized.
        - logger.log: "Waiting to connect to api"
        - delay: 5s
        - logger.log: "Starting sensor updates..."
        - repeat:
            count: 5
            then:
              #Sensor updates are turned off and manually requested on boot. 
              #Then the ESP goes back to sleep when they're done (unless told to stay awake)

              # Request sensor updates
              - component.update: dht_outside
              - delay: 2000ms # DHT11 is a really slow sensor
              - component.update: bmp_outside
              - delay: 100ms
  
  on_shutdown:
    priority: -100
    then:
      - if:
          condition:
            - binary_sensor.is_on: all_updates_received
          then:
            - logger.log: "Data from all sensors received"
          else:
            - logger.log: "One or more sensor updates missing"

      # Reset data update sensors states
      - binary_sensor.template.publish:
          id: temperature_dht_received
          state: OFF
      - binary_sensor.template.publish:
          id: humidity_dht_received
          state: OFF
      - binary_sensor.template.publish:
          id: temperature_bmp_received
          state: OFF
      - binary_sensor.template.publish:
          id: pressure_bmp_received
          state: OFF

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  manual_ip:
    static_ip: 192.168.64.52
    gateway: 192.168.64.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-F29175"
    password: "xnaA1wnmt2io"

captive_portal:

i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a

deep_sleep:
  id: deep_sleep_1
  run_duration: $max_run_duration
  sleep_duration: $sleep_duration

binary_sensor:
  # Data update sensors. Implemented as barrier. Huge thanks to user Mahko_Mahko on Home Assistant Community for providing his configuration example.
  # https://community.home-assistant.io/t/solar-powered-self-watering-plant-no-plumbing-no-power-wip/464263/14

  # Inside temperature DHT
  - platform: template
    name: Temperature DHT updated
    id: temperature_dht_received
    internal: True 
    # Internal components will not be exposed to the frontend (like Home Assistant). 
    # Only specifying an id without a name will implicitly set this to true.
  # Inside humidity DHT
  - platform: template
    name: Humidity DHT updated
    id: humidity_dht_received
    internal: True 
  # Inside temperature BMP
  - platform: template
    name: Temperature BMP updated
    id: temperature_bmp_received
    internal: True
  # Inside pressure BMP
  - platform: template
    name: Pressure BMP updated
    id: pressure_bmp_received
    internal: True 
  # All updates
  - platform: template
    name: Updates from all sensors received
    id: all_updates_received
    icon: mdi:database-refresh-outline
    # entity_category: diagnostic
    # If all sensors data is received. Will be false even if only one sensor fails.
    lambda: |-
      return
      id(temperature_dht_received).state &&
      id(humidity_dht_received).state &&
      id(temperature_bmp_received).state &&
      id(pressure_bmp_received).state;
    on_press:
    # Would this work with on_state as well?
      then:
#        - logger.log: 
#            format: "All sensors updated after %.1f seconds of uptime. Entering deep sleep."
#            args: ['id(uptime_seconds).state']
#        - delay: 100ms
#        - deep_sleep.enter: 
#            id: deep_sleep_1
        - script.execute: check_ota_mode
#        - script.execute: check_sensors_received

  # Import deep sleep switch from HA
  - platform: homeassistant
    name: "OTA mode ON 8266"
    internal: false
    id: esp8266_outside_ota_mode_esphome
    entity_id: input_boolean.esp8266_outside_ota_mode
    # detect turn off ota while running
    on_state:
      then:
        - script.execute: check_ota_mode

script:
  - id: check_ota_mode
    then:
      - logger.log: "Checking for OTA mode"
      - logger.log:
          format: "State of binary sensor is %d"
          args: ['id(esp8266_outside_ota_mode_esphome).state']
      - if:
          condition:
            - binary_sensor.is_on: esp8266_outside_ota_mode_esphome
          then:
            - logger.log: "OTA mode enabled for esp-32-inside; preventing deep sleep"
            - deep_sleep.prevent: deep_sleep_1
          else:
            - logger.log: "OTA mode is disabled; entering deep sleep"
            - deep_sleep.allow: deep_sleep_1
            - deep_sleep.enter: deep_sleep_1

#sensor:
  # Uptime sensor
#  - platform: uptime
#    id: uptime_seconds
#    name: Uptime sensor
#    update_interval: 1s
#    accuracy_decimals: 1
#    unit_of_measurement: s

# DHT11 - temperature, humidity
  - platform: dht
    model: DHT11
    pin: 14
    id: dht_outside
    update_interval: never
    temperature:
      name: "Outside temperature DHT"
      on_value:
        then:
          - binary_sensor.template.publish:
              id: temperature_dht_received
              state: ON
    humidity:
      name: "Outside humidity DHT"
      on_value:
        then:
          - binary_sensor.template.publish:
              id: humidity_dht_received
              state: ON

  # BMP280 - temperature, pressure
  - platform: bmp280
    address: 0x76
    id: bmp_outside
    update_interval: never
    temperature:
      name: "Outside temperature BMP"
      oversampling: 16x
      filters:
        - offset: -1.5
      on_value:
        then:
          - binary_sensor.template.publish:
              id: temperature_bmp_received
              state: ON
    pressure:
      name: "Outside pressure BMP"
      on_value:
        then:
          - binary_sensor.template.publish:
              id: pressure_bmp_received
              state: ON