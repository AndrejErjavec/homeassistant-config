substitutions:
  devicename: myroom
  max_run_duration: 60s
  sleep_duration: 120s

esp8266:
  board: d1_mini

esphome:
  name: $devicename
  on_boot:
    - priority: -100
      then: # At this priority, pretty much everything should already be initialized.
        - delay: 2s
        - logger.log: "Starting sensor updates..."
        - repeat:
            count: 5
            then:
              # Sensor updates are turned off and manually requested on boot. 
              # Then the ESP goes back to sleep when they're done (unless told to stay awake)
              # Request sensor updates
              - component.update: dht_sensor
              - delay: 250ms
              - component.update: bmp_sensor
              - delay: 100ms
  
  on_shutdown:
    priority: -100
    then:
      - if:
          condition:
            - binary_sensor.is_on: all_updates_received
          then:
            - logger.log: "Data from all sensors received"
          else:
            - logger.log: "One or more sensor updates missing"

      # Reset data update sensors states
      - binary_sensor.template.publish:
          id: temperature_received
          state: OFF
      - binary_sensor.template.publish:
          id: humidity_received
          state: OFF
      - binary_sensor.template.publish:
          id: pressure_received
          state: OFF

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # set to false if using multiple APs or mesh wifi
  fast_connect: false

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "my-room-esp-fallback"
    password: "xnaA1wnmt2io"

captive_portal:

#mqtt:
#  broker: !secret mqtt_broker
#  port: 1883
#  username: !secret mqtt_username
#  password: !secret mqtt_password
#  birth_message:
#    #topic: myavailability/topic
#    #payload: online
#  will_message:
#    #topic: myavailability/topic
#    #payload: offline
#
#  on_message:
#    - topic: my-room/ota_mode
#      payload: 'ON'
#      then:
#        - binary_sensor.template.publish:
#            id: my_room_ota_mode
#            state: ON
#        - deep_sleep.prevent: deep_sleep_1
#        - logger.log: "OTA mode enabled - deep sleep mode disabled"
#    - topic: my-room/ota_mode
#      payload: 'OFF'
#      then:
#        - binary_sensor.template.publish:
#            id: my_room_ota_mode
#            state: OFF
#        - deep_sleep.allow: deep_sleep_1
#        - deep_sleep.enter: deep_sleep_1
#        - logger.log: "deep sleep mode enabled"

i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a

deep_sleep:
  id: deep_sleep_1
  run_duration: $max_run_duration
  sleep_duration: $sleep_duration

binary_sensor:
  # Data update sensors. Implemented as barrier. Huge thanks to user Mahko_Mahko on Home Assistant Community for providing his configuration example.
  # https://community.home-assistant.io/t/solar-powered-self-watering-plant-no-plumbing-no-power-wip/464263/14

  # Inside temperature DHT
  - platform: template
    name: Temperature updated
    id: temperature_received
    internal: True 
    # Internal components will not be exposed to the frontend (like Home Assistant). 
    # Only specifying an id without a name will implicitly set this to true.
  - platform: template
    name: Humidity updated
    id: humidity_received
    internal: True 
  - platform: template
    name: Pressure updated
    id: pressure_received
    internal: True 
  # All updates
  - platform: template
    name: Updates from all sensors received
    id: all_updates_received
    internal: True
    # entity_category: diagnostic
    # If all sensors data is received. Will be false even if only one sensor fails.
    lambda: |-
      return
      id(humidity_received).state &&
      id(temperature_received).state &&
      id(pressure_received).state;
    on_press:
      then:
        - delay: 100ms
        - script.execute: sleep_if_allowed

# Import deep sleep switch from HA
  - platform: homeassistant
    name: "Myroom OTA mode"
    internal: false
    id: myroom_ota_mode
    entity_id: input_boolean.myroom_ota_mode
    # detect turn off OTA while running
    on_state:
      then:
        - script.execute: sleep_if_allowed

script:
  - id: sleep_if_allowed
    then:
      - if:
          condition:
            - binary_sensor.is_on: all_updates_received
          then:
            - if:
                condition:
                  - binary_sensor.is_on: myroom_ota_mode
                then:
                  - logger.log: "OTA mode enabled; preventing deep sleep"
                  - deep_sleep.prevent: deep_sleep_1
                else:
                  - logger.log: "OTA mode is disabled; entering deep sleep"
                  - deep_sleep.allow: deep_sleep_1
                  - deep_sleep.enter: deep_sleep_1
          else:
            - logger.log: "Not all sensors updates received yet. Retrying..."

sensor:
  - platform: uptime
    id: myroom_uptime
    name: Myroom uptime
    update_interval: 1s
    accuracy_decimals: 1
    unit_of_measurement: s
    internal: False

# DHT11 - temperature, humidity
  - platform: dht
    model: DHT11
    id: dht_sensor
    pin: 14
    update_interval: never
    humidity:
      name: "Myroom Humidity"
      id: myroom_humidity
      force_update: True
      on_value:
        then:
          - binary_sensor.template.publish:
              id: humidity_received
              state: !lambda "return !isnan(id(myroom_humidity).state);"

  # BMP280 - temperature, pressure
  - platform: bmp280
    id: bmp_sensor
    address: 0x76
    update_interval: never
    temperature:
      name: "Myroom Temperature"
      id: myroom_temperature
      force_update: True
      oversampling: 16x
      filters:
        - offset: -1.2
      on_value:
        then:
          - binary_sensor.template.publish:
              id: temperature_received
              state: !lambda "return !isnan(id(myroom_temperature).state);"
    pressure:
      name: "Myroom Pressure"
      id: myroom_pressure
      force_update: True
      on_value:
        then:
          - binary_sensor.template.publish:
              id: pressure_received
              state: !lambda "return !isnan(id(myroom_pressure).state);"